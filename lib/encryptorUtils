
################################################################################
# Common macros and functions for the NAS Encryptor.  Their relationships are
# as follows:
#
# - encryptorInitialization() is called once when a shell script runs.  This
#   function is free to do whatever is necessary in order to make sure the
#   other NAS Encryptor functions can run.
#
# - encryptorAddDirectory() gathers information from the user (as it pertains
#   to the specified exported directory).  It also does whatever is necessary
#   in order to make sure encryptorEncryptStart() can do its job.
#
# - encryptorEncryptStart() uses the information in the config file to start
#   encrypting the specified exported directory.
#
# - encryptorEncryptStop() uses the information in the config file to stop
#   encrypting the specified exported directory.
#
# - encryptorDelDirectory() cleans up after encryptorAddDirectory().  The
#   specified directory will no longer be encrypted.
#
################################################################################

ENCRYPTOR_CONF_FILE=/usr/local/etc/NASEncryptor.conf

################################################################################
################################################################################
encryptorExecuteMountCmd() {
	local MOUNT_SCRIPT=${1}

	chmod +x ${MOUNT_SCRIPT}

	# Be prepared to retry if the command fails the first time.
	for COUNT in {1..5}; do
		${MOUNT_SCRIPT} &> ${LOG}
		RC=$?
	done
}

################################################################################
################################################################################
encryptorNewMount() {
	local ENCFS_EXPORT="${1}"
	local NAS_MOUNT="${2}"
	local PASSWORD="${3}"

	local SCRIPT=/tmp/j.sh

	cat > ${SCRIPT} << EOF
#!/usr/bin/expect -f
set timeout 3600
spawn encfs "${NAS_MOUNT}" "${ENCFS_EXPORT}"
expect "anything else, or an empty line will select standard mode"
send "\r"
expect "New Encfs Password: "
send "${PASSWORD}\r"
expect "Verify Encfs Password: "
send "${PASSWORD}\r"
expect "# "
EOF

	encryptorExecuteMountCmd ${SCRIPT}
}

################################################################################
################################################################################
encryptorRemount() {
	local ENCFS_EXPORT="${1}"
	local NAS_MOUNT="${2}"
	local PASSWORD="${3}"

	local SCRIPT=/tmp/j.sh

	cat > ${SCRIPT} << EOF
#!/usr/bin/expect -f
set timeout 3600
spawn encfs "${NAS_MOUNT}" "${ENCFS_EXPORT}"
expect "EncFS Password: "
send "${PASSWORD}\r"
expect "# "
EOF

	encryptorExecuteMountCmd ${SCRIPT}
}

################################################################################
################################################################################
########################                                ########################
#######################  PUBLIC API IS BELOW THIS POINT  #######################
########################                                ########################
################################################################################
################################################################################

################################################################################
# Initialization function for the NAS Encryptor.
#
# Input:
#   LOG_FILE    = The name of the utility's log file.
#
#   VERBOSE     = Display console output.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
encryptorInitialization() {
	local LOG_FILE=${1}
	local VERBOSE=${2}

	[ ${VERBOSE} -eq 1 ] && echo -n "  Initializing the NAS Encryptor library ... "
	#[ $? -ne 0 ] && echo "Fail." && exit 1
	[ ${VERBOSE} -eq 1 ] && printResult ${RESULT_PASS}

	return 0
}

################################################################################
# Perform the steps necessary to encrypt the specified exported directory.  The
# directory has already been described by the user, and the configuration info
# has been stored in the config file(s).  We we're just supposed to go ahead and
# start encrypting the directory.
#
# Note that this might be the first time the user has attempted to encrypt the
# directory.  Be prepared to deal with those "first time" steps.
#
# Input:
#   EXPORT_DIR  - The name of the directory that will be exported to the user.
#                 We use this name to locate the necessary information in our
#                 config file.
#
# Output:
#   0 - success.
#   1 - failure.
#
################################################################################
NASE_LOCAL_MOUNT_POINT=/encfs/export/nfsDir
export NASE_LOCAL_MOUNT_POINT

encryptorEncryptStart() {
	local EXPORT_DIR="${1}"

	local RECORD=`grep "^${EXPORT_DIR}|:|:|" ${ENCRYPTOR_CONF_FILE}`
	# TODO - error checking

	local LCL_MOUNT_POINT=` echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $2'}`
	local ENCFS_EXPORT_DIR=`echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $3'}`
	local PASSWORD=`        echo ${RECORD} | sed -e "s/|:|:|/ /g;" | awk {'print $4'}`

	echo ""
	echo "  EncFS Internal mounting:"
	echo "    ${ENCFS_EXPORT_DIR} -> ${LCL_MOUNT_POINT}"
	echo ""

	if [ -f ${LCL_MOUNT_POINT}/.encfs6.xml ]; then
		encryptorRemount  ${ENCFS_EXPORT_DIR} ${LCL_MOUNT_POINT} ${PASSWORD}
	else
		encryptorNewMount ${ENCFS_EXPORT_DIR} ${LCL_MOUNT_POINT} ${PASSWORD}
	fi

	echo "" ; echo "================================================="
	echo "SETTING LOCAL_MOUNT_POINT=${ENCFS_EXPORT_DIR}"
	echo "" ; echo "================================================="
	export LOCAL_MOUNT_POINT=${ENCFS_EXPORT_DIR}

	return 0
}

################################################################################
# Perform the steps necessary to stop encrypting the specified exported
# directory.  Note that there might be problems somewhere.  Keep pushing ahead
# and try to do as much as possible.  Don't give up because we hit problems.
# And try to fix as many problems as possible.  We don't want to leave a mess.
#
# Input:
#   EXPORT_DIR  - The name of the directory that is being exported to the user.
#                 We use this name to locate the necessary information in our
#                 config file.
#
# Output:
#   0 - success.
#   1 - failure.
#
################################################################################
encryptorEncryptStop() {
	local EXPORT_DIR="${1}"

	echo "THIS IS THE encryptorEncryptStop() function."

	return 0
}

################################################################################
# Clean up the configuration file(s) so we will no longer encrypt the specified
# exported directory.  This function doesn't perform the steps necessary to stop
# decrypting the directory.  It just cleans up the config files and removes the
# EncFS-export directory so we won't try to encrypt the directory in the future.
#
# Input:
#   EXPORT_DIR  - The name of the directory that used to be exported to the user.
#                 We use this name to locate the necessary information in our
#                 config file.
#
# Output:
#   0 - success.
#   1 - failure.
#
################################################################################
encryptorDelDirectory() {
	local EXPORT_DIR="${1}"

	echo "THIS IS THE encryptorDelDirectory() function."

	return 0
}

################################################################################
# Gather information necessary to encrypt a new exported directory.
#
# This function is allowed to query the user.
#
# Input:
#   EXPORT_DIR  - The name of the directory that will be exported to the user.
#                 It is useful to the NAS Encryptor because it will be unique
#                 over all of the encrypted directories.
#
#   MOUNT_POINT - The directory that contains the mount point to the NAS.  This
#                 is the directory that needs to be encrypted.
#
# Output:
#   0 - success.
#   1 - failure.
################################################################################
encryptorAddDirectory() {
	local EXPORT_DIR="${1}"
	local MOUNT_POINT="${2}"

	echo "  EncFS requires a password for \"${MOUNT_POINT}\"."

	local PW1="1"
	local PW2="2"
	while [ "${PW1}" != "${PW2}" ]; do
		read -s -p "    Enter password: "
		local PW1=${REPLY}
		echo ""
		read -s -p "    Re-enter password: "
		local PW2=${REPLY}
		echo ""

		if [ "${PW1}" != "${PW2}" ]; then
			echo "    Error: Passwords don't match.  Try again."
		fi
	done

	echo ""

	# Create the directory that EncFS will export the encrypted files
	# through.  This is a local directory on the NAS Proxy computer.
	local ENCFS_EXPORT_DIR="/encfs/${EXPORT_DIR}"
	mkdir -p ${ENCFS_EXPORT_DIR}
	# TODO error checking.

	# Save the information.  Don't worry about duplicates for now.  We will
	# fix that after we get a single mount working.
	echo "${EXPORT_DIR}|:|:|${MOUNT_POINT}|:|:|${ENCFS_EXPORT_DIR}|:|:|${PW1}" >> ${ENCRYPTOR_CONF_FILE}
	# TODO error checking.

	return 0
}

